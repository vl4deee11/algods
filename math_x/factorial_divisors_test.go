package math_x

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

// Нахождение степени делителя факториала
// Даны два числа: n и k. Требуется посчитать,
// с какой степенью делитель k входит в число n!, т.е. найти наибольшее x такое, что n! делится на k^x.
// Алгоритм
// Рассмотрим сначала случай, когда k простое.
//
// Выпишем выражение для факториала в явном виде:
//
// n! = 1 * 2 * 3 .... (n-1) * n
//
// Заметим, что каждый k-ый член этого произведения делится на k, т.е. даёт +1 к ответу
// количество таких членов равно floor(n/k)
// Далее, заметим, что каждый k^2-ый член этого ряда делится на k^2, т.е.
// даёт ещё +1 к ответу (учитывая, что k в первой степени уже было учтено до этого)
// количество таких членов равно floor(n/k^2).
//
// И так далее, каждый k^i-ый член ряда даёт +1 к ответу, а количество таких членов равно floor(n/k^i).
//
// Таким образом, ответ равен величине:
//
// floor(n/k) + floor(n/k^2) + ... + floor(n/k^i)
//
// Эта сумма, разумеется, не бесконечная, т.к. только первые примерно log_k(n) членов отличны от нуля.
// Следовательно, асимптотика такого алгоритма равна O(log_k(n)).

func factPow(n, k int) int {
	r := 0
	for n > 0 {
		n /= k
		r += n
	}
	return r
}

func TestFactPow(t *testing.T) {
	x := factPow(120, 5)
	assert.Equal(t, x, 28)
}
